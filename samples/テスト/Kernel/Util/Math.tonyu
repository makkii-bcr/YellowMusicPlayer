extends Object;

constructor Math(){
  $Math=this;
  
  AtanAccuracy=10000;
  // 逆正接の精度。大きければ大きいほど正確というわけでもない。
  // 10000が精度,速度の両方で最適。
  // 精度優先なら1000000,速度優先なら100あるいは1000
  // 10000000より大きいとループを抜けられなくなる
}

function setAtanAccuracy(a) {
  AtanAccuracy=a;
}

// * 定数

function pi(){return 3.141592653589793;}


// * 三角関数

// function sin(t);
// function cos(t);

function tan(t){
  var a;a=cos(t);
  if(a) return sin(t)/a;
  return null;
}

function cot(t){
  var a;a=sin(t);
  if(a) return cos(t)/a;
  return null;
}

function sec(t){
  var a;a=cos(t);
  if(s)return 1/a;return null;
}

function csc(t){
  var a;a=sin(t);
  if(s)return 1/a;return null;
}

function atan(x){
  var a,b,aa,bb,d;
  a=1/sqrt(1+x*x);b=1;
  while(1){
    aa=(a+b)/2;bb=sqrt(aa*b);
    if(abs(aa-bb)/bb<1/AtanAccuracy)return((x/sqrt(aa*bb*(1+x*x)))*(180/pi()));
    a=aa;b=bb;
  }
}

function asin(x){
  if(x<-1||x>1) return null;
  if(x==1) return 90;
  if(x==-1) return -90;
  return atan(x/sqrt(1-x*x));
}

function acos(x){
  if(x<-1||x>1) return null;
  if(x==1) return 0;
  if(x==-1) return 180;
  return 90-atan(x/sqrt(1-x*x));
}

function angle(x,y){//override
  if(x>0) return atan(y/x);
  if(x<0) return atan(y/x)+180;
  if(y<0) return -90;
  if(y>0) return 90;
  return 0;
}

// * 弧度変換

function degrees(d){
  return d*180/pi();
}
function radians(r){
  return r*pi()/180;
}

// * 回転

function roll(x,y,angle,cx,cy) {
  x-=cx;
  y-=cy;
  rx=  cos(angle)*  x  -  sin(angle)* y;
  ry=  sin(angle)*  x  +  cos(angle)* y;
  rx+=cx;
  ry+=cy;  
}

// * 数値判定

function sign(n){
  if(n<0) return -1;
  if(n>0) return 1;
  return 0;
}

function isOdd(n){
  if(!isInt(n)) return null;
  return n%2;
}
function isEven(n){
  if(!isInt(n)) return null;
  return 1-n%2;
}



// * 乱数

// i以上a未満の整数乱数を発生させる
function randBetween(i,a){
  if(a<i) return randBetween(a,i);
  if(a==i) return a;
  return i+rnd(a-i);
}

// i以上a未満の実数乱数を発生させる
function randBetweenFloat(i,a){
  if(a<i) return randBetweenFloat(a,i);
  if(a==i) return a;
  return i+rnd()*(a-i);
}
extends Main2;

if (!$fullScreen) $Window.setDrawMode("A");
$System.setFrameRate(58, 5);
$Options.set("sleep_time", 1);
$mplayer.setDelay(2400);
$mplayer.setBSize(8000);
$screenWidth  = 640;
$screenHeight = 480;

setFont("ＭＳ ゴシック");
$panel.setTransparentColor(color(0, 0, 128));
$panel.clear();
$panel.drawText(10,  10, $Options.get("title"), $clYellow, 20);
$panel.drawText($screenWidth-170,  5, "表示切替         : P", $clWhite, 9);
$panel.drawText($screenWidth-170, 20, "オプション       : O", $clWhite, 9);
$panel.drawText($screenWidth-170, 35, "プレイヤー切替   : Enter", $clWhite, 9);
    
$panel.drawText($screenWidth-100, 60, "         ↑"  , $clWhite, 9);
$panel.drawText($screenWidth-100, 68, "選択 : ←  →", $clWhite, 9);
$panel.drawText($screenWidth-100, 76, "         ↓"  , $clWhite, 9);

$map.setBGColor(color(0, 0, 128));
$clGray       = color(64, 64, 64);
$clBlackGreen = color(0, 128, 0);
$clYellow2    = color(255, 192, 0);
$clGreen2     = color(192, 255, 0);
setVisible(1);
startGetTime = 0;
drawCnt = 0;
renda  = 0;
loop   = 1;
textVisible = 2;
selectEff = 0;

// MidiPlayer関係 //
$mplayer = new Ymplayer();          // $mplayerをYmplayerオブジェクトで上書き

while (1) {
  if (!$mplayer.getPlayerReady()) break;
  drawText(10, $screenHeight-40, "MusicPlayer 準備中…", $clYellow);
  update();
}

// ウィンドウを真ん中に持ってくる
if (!$displayMove) {
  $displayMove = 1;
  $mplayer.setGetMode(1000);
  $mplayer.updatePlayInfo(); // デフォルトのエフェクト設定を書き込む
  displayWidth  = 0;
  displayHeight = 0;
  for (i=0; i<20; i++) {
    update();
    $mplayer.getPlayerStatus();
    displayWidth  = $mplayer.getDisplayWidth();
    displayHeight = $mplayer.getDisplayHeight();
    if (displayWidth && displayHeight) {
      $windowX = displayWidth /2 - $screenWidth /2 - 8;
      $windowY = displayHeight/2 - $screenHeight/2 - 30;
      if ($windowY < 0) $windowY = 0;
      break;
    }
  }
}

$mplayer.setGetMode(0);
$mplayer.updatePlayInfo(); // 無効に戻す



bgmGettingPlayerStatus = 0;

midiVolume = 127;
midiTempo  = 1; midiTempoInt = midiTempo*100;
midiPitch  = 0; midiPitchInt = 0;

midiFadeOutTime = 0;
midiFadeInTime  = 0;
midiKeyShift    = 0;
midiStartTick   = 0;

midiSkipBeginning = 1;
midiSkipEnding    = 0;
midiMasterPitch   = 0;
midiNormalize     = 0;
midiExclusive     = 0;

oggVolume   = 127;
oggTempo    = 1; oggTempoInt = midiTempo*100;
oggPan      = 0; oggPanInt   = 0;

oggFadeInTime    = 0;
oggFadeOutTime   = 0;
oggStartTime     = 0;
oggLoopStartTime = 0;
oggLoopEndTime   = 0;
oggFileLoop      = 0;
  
timeDayOfWeekText = " ()"; timeDayOfWeek_old = null;

bgmOggOn = 0;

openOption = 0;
openListPlayer = 0;

// BGMのリストを取得
midiAry = $mplayer.getMidiList();
midiArySize = midiAry.size();
selectMidiBgm = 0;
selectOggBgm  = 0;

oggAry = new Array();
oggAry.load("OggFileList.txt");
oggArySize = oggAry.size();

listPlayer = new ListPlayer();

while(1) {
  
  // ボタン判定 //
  if (getkey(13) == 1) {
    openListPlayer = 1;
    listPlayer.run(midiAry, oggAry); // Enter:リストプレイヤーを開く
    $mplayer.setGetMode(bgmGettingPlayerStatus);
  }
  if (getkey(79) == 1) musicPlayerOption();           // O:オプションを開く
  if (getkey(90)) loopKey    ++; else loopKey    = 0; // Z:ループ設定
  if (getkey(88)) leftKey    ++; else leftKey    = 0; // X:選曲−
  if (getkey(67)) playKey    ++; else playKey    = 0; // C:再生
  if (getkey(86)) rightKey   ++; else rightKey   = 0; // V:選曲＋
  if (getkey(66)) stopKey    ++; else stopKey    = 0; // B:停止
  if (getkey(78)) pauseKey   ++; else pauseKey   = 0; // N:一時停止
  if (getkey(77)) restartKey ++; else restartKey = 0; // M:再開
  if ((getkey(65) == 1 || getkey(65) > 10) && renda >  0) renda --; // S:連打−
  if ((getkey(83) == 1 || getkey(83) > 10) && renda < 60) renda ++; // F:連打＋
  if (getkey(80) == 1) textVisible = (textVisible + 1) % 3;   // P:表示切替
  
  if (getkey(38) == 1 || (getkey(38) > 20 && getkey(38) % 5 == 1)) selectEff --; // ↑:
  if (getkey(40) == 1 || (getkey(40) > 20 && getkey(40) % 5 == 1)) selectEff ++; // ↓:
  if (selectEff <  0) selectEff = 12;
  if (selectEff > 12) selectEff =  0;
  
  if (getkey(16) == 1) {
    bgmOggOn = !bgmOggOn;
    if (bgmOggOn && 9 <= selectEff && selectEff <= 11) selectEff = 6;
  }
  if (bgmOggOn) {
    if (selectEff ==  9) selectEff = 12;
    if (selectEff == 11) selectEff =  8;
  }
  buttonL = getkey(37); // ←:
  buttonR = getkey(39); // →:
  
  playIf     = (!renda && playKey == 1) || (renda == 1 && playKey) || (renda >= 2 && playKey % renda == 1);
  loopIf     = (loopKey == 1);
  stopIf     = (!renda && stopKey    == 1) || (renda == 1 && stopKey   ) || (renda >= 2 && stopKey    % renda == 1);
  pauseIf    = (!renda && pauseKey   == 1) || (renda == 1 && pauseKey  ) || (renda >= 2 && pauseKey   % renda == 1);
  restartIf  = (!renda && restartKey == 1) || (renda == 1 && restartKey) || (renda >= 2 && restartKey % renda == 1);
  leftIf     = (leftKey  == 1) || (leftKey  > 10 && leftKey  % 2 == 1) || (leftKey  > 40);
  rightIf    = (rightKey == 1) || (rightKey > 10 && rightKey % 2 == 1) || (rightKey > 40);
  
  
  // エフェクト設定 //
  if (!bgmOggOn) {
    if (selectEff == 0) {
      if (buttonL == 1 || buttonL > 5) { midiVolume -= 1; if (midiVolume <   0) midiVolume =   0; }
      if (buttonR == 1 || buttonR > 5) { midiVolume += 1; if (midiVolume > 127) midiVolume = 127; }
    } else if (selectEff == 1) {
      if (buttonL == 1 || buttonL > 5) { midiTempoInt -= 1 + (buttonL > 30)*4; if (midiTempoInt <  10) midiTempoInt =  10;}
      if (buttonR == 1 || buttonR > 5) { midiTempoInt += 1 + (buttonR > 30)*4; if (midiTempoInt > 800) midiTempoInt = 800;}
      midiTempo = midiTempoInt / 100;
    } else if (selectEff == 2) {
      if (buttonL == 1 || buttonL > 5) { midiPitch -= 128; if (midiPitch < -8192) midiPitch = -8192; if (midiPitch == 8191-128) midiPitch =  8192-128; }
      if (buttonR == 1 || buttonR > 5) { midiPitch += 128; if (midiPitch >  8191) midiPitch =  8191; }
    } else if (selectEff == 3) {
      if (buttonL == 1 || buttonL > 5) { midiFadeInTime -= 1 + (buttonL > 30)*9 + (buttonL > 60)*40 + (buttonL > 90)*100; if (midiFadeInTime < 0) midiFadeInTime = 0; }
      if (buttonR == 1 || buttonR > 5) { midiFadeInTime += 1 + (buttonR > 30)*9 + (buttonR > 60)*40 + (buttonR > 90)*100;}
    } else if (selectEff == 4) {
      if (buttonL == 1 || buttonL > 5) { midiFadeOutTime -= 1 + (buttonL > 30)*9 + (buttonL > 60)*40 + (buttonL > 90)*100; if (midiFadeOutTime < 0) midiFadeOutTime = 0; }
      if (buttonR == 1 || buttonR > 5) { midiFadeOutTime += 1 + (buttonR > 30)*9 + (buttonR > 60)*40 + (buttonR > 90)*100;}
    } else if (selectEff == 5) {
      if (buttonL == 1 || buttonL > 5) { midiStartTick -= 1 + (buttonL > 30)*9 + (buttonL > 60)*40 + (buttonL > 90)*200; if (midiStartTick < 0) midiStartTick = 0; }
      if (buttonR == 1 || buttonR > 5) { midiStartTick += 1 + (buttonR > 30)*9 + (buttonR > 60)*40 + (buttonR > 90)*200; }
    } else if (selectEff == 6) {
      if (buttonL % 5 == 1) { midiKeyShift -= 1; }
      if (buttonR % 5 == 1) { midiKeyShift += 1; }
    } else if (selectEff == 7) {
      if (buttonL == 1 || buttonR == 1) { midiSkipBeginning = !midiSkipBeginning;}
    } else if (selectEff == 8) {
      if (buttonL == 1 || buttonR == 1) { midiSkipEnding = !midiSkipEnding;}
    } else if (selectEff == 9) {
      if (buttonL == 1 || buttonR == 1) { midiMasterPitch = !midiMasterPitch;}
    } else if (selectEff == 10) {
      if (buttonL == 1 || buttonR == 1) { midiNormalize = !midiNormalize;}
    } else if (selectEff == 11) {
      if (buttonL == 1 || buttonR == 1) { midiExclusive = !midiExclusive;}
      
    } else if (selectEff == 12) {
      if (buttonL == 1 || buttonL > 5) { bgmGettingPlayerStatus -= 1 + (buttonL > 60)*9; if (bgmGettingPlayerStatus <    0) bgmGettingPlayerStatus =    0; }
      if (buttonR == 1 || buttonR > 5) { bgmGettingPlayerStatus += 1 + (buttonR > 60)*9; if (bgmGettingPlayerStatus > 1000) bgmGettingPlayerStatus = 1000; }
      $mplayer.setGetMode(bgmGettingPlayerStatus);
    }
  } else {
    if (selectEff == 0) {
      if (buttonL == 1 || buttonL > 5) { oggVolume -= 1; if (oggVolume <   0) oggVolume =   0; }
      if (buttonR == 1 || buttonR > 5) { oggVolume += 1; if (oggVolume > 127) oggVolume = 127; }
    } else if (selectEff == 1) {
      if (buttonL == 1 || buttonL > 5) { oggTempoInt -= 1 + (buttonL > 30)*4; if (oggTempoInt <   1) oggTempoInt = 1;  }
      if (buttonR == 1 || buttonR > 5) { oggTempoInt += 1 + (buttonR > 30)*4; if (oggTempoInt > 800) oggTempoInt = 800;}
      oggTempo = oggTempoInt / 100;
    } else if (selectEff == 2) {
      if (buttonL == 1 || buttonL > 5) { oggPanInt -= 1 + (buttonL > 30)*4; if (oggPanInt < -100) oggPanInt = -100; }
      if (buttonR == 1 || buttonR > 5) { oggPanInt += 1 + (buttonR > 30)*4; if (oggPanInt >  100) oggPanInt =  100; }
      oggPan = oggPanInt / 100;
    } else if (selectEff == 3) {
      if (buttonL == 1 || buttonL > 5) { oggFadeInTime -= 1 + (buttonL > 30)*9 + (buttonL > 60)*40 + (buttonL > 90)*100; if (oggFadeInTime < 0) oggFadeInTime = 0; }
      if (buttonR == 1 || buttonR > 5) { oggFadeInTime += 1 + (buttonR > 30)*9 + (buttonR > 60)*40 + (buttonR > 90)*100;}
    } else if (selectEff == 4) {
      if (buttonL == 1 || buttonL > 5) { oggFadeOutTime -= 1 + (buttonL > 30)*9 + (buttonL > 60)*40 + (buttonL > 90)*100; if (oggFadeOutTime < 0) oggFadeOutTime = 0; }
      if (buttonR == 1 || buttonR > 5) { oggFadeOutTime += 1 + (buttonR > 30)*9 + (buttonR > 60)*40 + (buttonR > 90)*100;}
    } else if(selectEff == 5) {
      if (buttonL == 1 || buttonL > 5) { oggStartTime -= 1 + (buttonL > 30)*9 + (buttonL > 60)*40 + (buttonL > 90)*200; if (oggStartTime < 0) oggStartTime = 0; }
      if (buttonR == 1 || buttonR > 5) { oggStartTime += 1 + (buttonR > 30)*9 + (buttonR > 60)*40 + (buttonR > 90)*200; }
    } else if(selectEff == 6) {
      if (buttonL == 1 || buttonL > 5) { oggLoopStartTime -= 1 + (buttonL > 30)*9 + (buttonL > 60)*40 + (buttonL > 90)*200; if (oggLoopStartTime < 0) oggLoopStartTime = 0; }
      if (buttonR == 1 || buttonR > 5) { oggLoopStartTime += 1 + (buttonR > 30)*9 + (buttonR > 60)*40 + (buttonR > 90)*200; }
    } else if(selectEff == 7) {
      if (buttonL == 1 || buttonL > 5) { oggLoopEndTime -= 1 + (buttonL > 30)*9 + (buttonL > 60)*40 + (buttonL > 90)*200; if (oggLoopEndTime < 0) oggLoopEndTime = 0; }
      if (buttonR == 1 || buttonR > 5) { oggLoopEndTime += 1 + (buttonR > 30)*9 + (buttonR > 60)*40 + (buttonR > 90)*200; }
    } else if(selectEff == 8) {
      if (buttonL == 1 || buttonR == 1) { oggFileLoop = !oggFileLoop; }
    } else if (selectEff == 12) {
      if (buttonL == 1 || buttonL > 5) { bgmGettingPlayerStatus -= 1 + (buttonL > 60)*9; if (bgmGettingPlayerStatus <    0) bgmGettingPlayerStatus =    0; }
      if (buttonR == 1 || buttonR > 5) { bgmGettingPlayerStatus += 1 + (buttonR > 60)*9; if (bgmGettingPlayerStatus > 1000) bgmGettingPlayerStatus = 1000; }
      $mplayer.setGetMode(bgmGettingPlayerStatus);
    }
  }
  
  // エフェクト項目セット //
  if (!bgmOggOn || openListPlayer == 1) { // midiのエフェクト・再生オプションをセット
    $mplayer.setMidiVolume(midiVolume);
    $mplayer.setMidiTempo(midiTempo);
    $mplayer.setMidiPitch(midiPitch);
    $mplayer.setMidiFadeInTime(midiFadeInTime);
    $mplayer.setMidiFadeOutTime(midiFadeOutTime);
    $mplayer.setMidiStartTick(midiStartTick);
    $mplayer.setMidiKeyShift(midiKeyShift);
    $mplayer.setMidiSkipBeginning(midiSkipBeginning);
    $mplayer.setMidiSkipEnding(midiSkipEnding);
    $mplayer.setMidiMasterPitch(midiMasterPitch);
    $mplayer.setMidiNormalize(midiNormalize);
    $mplayer.setMidiExclusive(midiExclusive);
    // ↓ver2.05までの呼び方↓
    //$mplayer.setDynamicEffect(midiVolume, midiTempo, midiPitch);
    //$mplayer.setStaticEffect(midiFadeInTime, midiFadeOutTime, midiStartTick, midiKeyShift);
    //$mplayer.setPlayingOption(midiSkipBeginning, midiSkipEnding, midiMasterPitch, midiNormalize, midiExclusive);
  }
  if (bgmOggOn || openListPlayer == 1){ // oggのエフェクトをセット
    $mplayer.setOggVolume(oggVolume);
    $mplayer.setOggTempo(oggTempo);
    $mplayer.setOggPan(oggPan);
    $mplayer.setOggFadeInTime(oggFadeInTime);
    $mplayer.setOggFadeOutTime(oggFadeOutTime);
    $mplayer.setOggStartTime(oggStartTime);
    $mplayer.setOggLoopStartTime(oggLoopStartTime);
    $mplayer.setOggLoopEndTime(oggLoopEndTime);
    $mplayer.setOggFileLoop(oggFileLoop);
    // ↓ver2.05までの呼び方↓
    //$mplayer.setDynamicEffectOgg(oggVolume, oggTempo, oggPan);
    //$mplayer.setStaticEffectOgg(oggFadeInTime, oggFadeOutTime, oggStartTime, oggLoopStartTime, oggLoopEndTime, oggFileLoop);
  }
  // ここでエフェクト設定がMidiPlayerに反映される↓
  if (buttonL > 0 || buttonR > 0 || openListPlayer == 1) $mplayer.updatePlayInfo();
  openListPlayer = 0;
  
  // 情報取得 //
  if (!(!bgmGettingPlayerStatus)) $mplayer.getPlayerStatus();
  
  
  // 再生・繰り返し・停止・一時停止・再開 //
  if (loopIf) loop = !loop; // ループ
  
  if (playIf) { // 再生
    if (!bgmOggOn) { if (midiArySize > 0) $mplayer.play(midiAry.get(selectMidiBgm), loop);} // midi
    else           { if (oggArySize  > 0) $mplayer.play(oggAry.get(selectOggBgm)  , loop);} // ogg
    playPlay = 255;
  } else {
    playPlay -= 16;
  }
  
  if (stopIf) { // 停止
    if (!bgmOggOn) $mplayer.stop(1); // midi
    else           $mplayer.stop(2); // ogg
    stopPlay = 255;
  } else {
    stopPlay -= 16;
  }
  if (pauseIf) { // 一時停止
    if (!bgmOggOn) $mplayer.pause(1); // midi
    else           $mplayer.pause(2); // ogg
    pausePlay   = 255;
  } else { 
    pausePlay   -= 16;
  }
  if (restartIf) { // 再開
    if (!bgmOggOn) $mplayer.restart(1); // midi
    else           $mplayer.restart(2); // ogg
    restartPlay = 255;
  } else {
    restartPlay -= 16;
  }
  
  // 曲選択
  if (leftIf) {
    if (!bgmOggOn) selectMidiBgm --;
    else           selectOggBgm --;
    leftPlay = 255;
  } else {
    leftPlay -= 16;
  }
  if (rightIf) {
    if (!bgmOggOn) selectMidiBgm ++;
    else           selectOggBgm ++;
    rightPlay = 255;
  } else {
    rightPlay -= 16;
  }
  
  if (selectMidiBgm < 0) selectMidiBgm = midiArySize - 1;
  if (selectOggBgm  < 0) selectOggBgm  = oggArySize - 1;
  if (selectMidiBgm >= midiArySize) selectMidiBgm = 0;
  if (selectOggBgm >= oggArySize) selectOggBgm = 0;
  
  // 表示関係 //
  if (leftPlay    > 128) drawText( 10, $screenHeight- 95,"←"     , color(255 - (255 - leftPlay   )*2, 255 - (255 - leftPlay   )*2, leftPlay   ), 28);
  if (playPlay    > 128) drawText( 70, $screenHeight- 90,"PLAY"   , color(255 - (255 - playPlay   )*2, 255 - (255 - playPlay   )*2, playPlay   ), 20);
  if (rightPlay   > 128) drawText(150, $screenHeight- 95,"→"     , color(255 - (255 - rightPlay  )*2, 255 - (255 - rightPlay  )*2, rightPlay  ), 28);
  if (stopPlay    > 128) drawText( 10, $screenHeight- 60,"STOP"   , color(255 - (255 - stopPlay   )*2, 255 - (255 - stopPlay   )*2, stopPlay   ), 16);
  if (pausePlay   > 128) drawText( 70, $screenHeight- 60,"PAUSE"  , color(255 - (255 - pausePlay  )*2, 255 - (255 - pausePlay  )*2, pausePlay  ), 16);
  if (restartPlay > 128) drawText(150, $screenHeight- 60,"RESTART", color(255 - (255 - restartPlay)*2, 255 - (255 - restartPlay)*2, restartPlay), 16);
  
  if (textVisible >= 2) {
    if (bgmOggOn) drawText(10, 90+20*1 , "Ogg      : Shift", $clWhite, 16);
    else          drawText(10, 90+20*1 , "Midi     : Shift", $clWhite, 16);
    drawText(10, 90+20*2 , "繰り返し : Z", (!loop     )*$clWhite + (!(!loop     ))*$clGreen, 16);
    drawText(10, 90+20*3 , "選曲−   : X", (!leftIf   )*$clWhite + (!(!leftIf   ))*$clGreen, 16);
    drawText(10, 90+20*4 , "再生     : C", (!playIf   )*$clWhite + (!(!playIf   ))*$clGreen, 16);
    drawText(10, 90+20*5 , "選曲＋   : V", (!rightIf  )*$clWhite + (!(!rightIf  ))*$clGreen, 16);
    drawText(10, 90+20*6 , "停止     : B", (!stopIf   )*$clWhite + (!(!stopIf   ))*$clGreen, 16);
    drawText(10, 90+20*7 , "一時停止 : N", (!pauseIf  )*$clWhite + (!(!pauseIf  ))*$clGreen, 16);
    drawText(10, 90+20*8 , "再開     : M", (!restartIf)*$clWhite + (!(!restartIf))*$clGreen, 16);
    
    drawText(10, 90+20*10, renda + "ﾌﾚｰﾑ毎連打 : A,S", $clWhite, 16);
    
    if (bgmOggOn) {
      if (oggArySize > 0) drawText(10, 70+20*0, "選択曲("+(selectOggBgm+1)+"/"+oggArySize+")："+oggAry.get(selectOggBgm), $clYellow2, 9);
    } else {
      if (midiArySize > 0) drawText(10, 70+20*0, "選択曲("+ (selectMidiBgm+1) +"/"+ midiArySize +")："+midiAry.get(selectMidiBgm).getName(), $clYellow2, 9);
    }
  }
  
  if (textVisible >= 1) {
    if (!bgmOggOn) { // midi
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  0)) drawText(275, 70+18*0, "音量   :" + midiVolume, (selectEff != 0)*$clWhite + (selectEff == 0)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  1)) drawText(275, 70+18*1, "テンポ :" + midiTempo , (selectEff != 1)*$clWhite + (selectEff == 1)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  2)) drawText(275, 70+18*2, "ピッチ :" + midiPitch , (!(!midiMasterPitch) && selectEff != 2)*$clWhite + (!(!midiMasterPitch) && selectEff == 2)*$clGreen +
                                                                                                                     ( (!midiMasterPitch) && selectEff != 2)*$clGray  + ( (!midiMasterPitch) && selectEff == 2)*$clBlackGreen, 12);
      
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  3)) drawText(275, 70+10+18*3, "フェードイン  :" + midiFadeInTime , (selectEff != 3)*$clWhite + (selectEff == 3)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  4)) drawText(275, 70+10+18*4, "フェードアウト:" + midiFadeOutTime, (selectEff != 4)*$clWhite + (selectEff == 4)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  5)) drawText(275, 70+10+18*5, "開始ティック  :" + midiStartTick  , (selectEff != 5)*$clWhite + (selectEff == 5)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  6)) drawText(275, 70+10+18*6, "キーシフト    :" + midiKeyShift   , (selectEff != 6)*$clWhite + (selectEff == 6)*$clGreen, 12);
      
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  7)) drawText(275, 70+10*2+18*7 , "冒頭スキップ    :" + midiSkipBeginning, (selectEff !=  7)*$clWhite + (selectEff ==  7)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  8)) drawText(275, 70+10*2+18*8 , "末尾スキップ    :" + midiSkipEnding   , (selectEff !=  8)*$clWhite + (selectEff ==  8)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  9)) drawText(275, 70+10*2+18*9 , "マスターピッチ  :" + midiMasterPitch  , (selectEff !=  9)*$clWhite + (selectEff ==  9)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff == 10)) drawText(275, 70+10*2+18*10, "ノーマライズ    :" + midiNormalize    , (selectEff != 10)*$clWhite + (selectEff == 10)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff == 11)) drawText(275, 70+10*2+18*11, "エクスクルーシブ:" + midiExclusive    , (selectEff != 11)*$clWhite + (selectEff == 11)*$clGreen, 12);
      
    } else { // ogg
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  0)) drawText(275, 70+18*0, "音量   :" + oggVolume, (selectEff != 0)*$clWhite + (selectEff == 0)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  1)) drawText(275, 70+18*1, "テンポ :" + oggTempo , (selectEff != 1)*$clWhite + (selectEff == 1)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  2)) drawText(275, 70+18*2, "パン   :" + oggPan   , (selectEff != 2)*$clWhite + (selectEff == 2)*$clGreen, 12);
      
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  3)) drawText(275, 70+10+18*3, "フェードイン    :" + oggFadeInTime   , (selectEff != 3)*$clWhite + (selectEff == 3)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  4)) drawText(275, 70+10+18*4, "フェードアウト  :" + oggFadeOutTime  , (selectEff != 4)*$clWhite + (selectEff == 4)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  5)) drawText(275, 70+10+18*5, "再生開始時間    :" + oggStartTime    , (selectEff != 5)*$clWhite + (selectEff == 5)*$clGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  6)) drawText(275, 70+10+18*6, "ループ開始時間  :" + oggLoopStartTime, (!oggFileLoop && selectEff != 6)*$clWhite + (!oggFileLoop && selectEff == 6)*$clGreen +
                                                                                                                                       ( oggFileLoop && selectEff != 6)*$clGray  + ( oggFileLoop && selectEff == 6)*$clBlackGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  7)) drawText(275, 70+10+18*7, "ループ終了時間  :" + oggLoopEndTime  , (!oggFileLoop && selectEff != 7)*$clWhite + (!oggFileLoop && selectEff == 7)*$clGreen +
                                                                                                                                       ( oggFileLoop && selectEff != 7)*$clGray  + ( oggFileLoop && selectEff == 7)*$clBlackGreen, 12);
      if (textVisible >= 2 || (textVisible >= 1 && selectEff ==  8)) drawText(275, 70+10+18*8, "Oggループ使用   :" + oggFileLoop     , (selectEff != 8)*$clWhite + (selectEff == 8)*$clGreen, 12);
      
    }
    
    if (textVisible >= 2 || (textVisible >= 1 && selectEff == 12)) drawText(275, 70+10*3+18*12, "MusicPlayer状態取得:" + bgmGettingPlayerStatus, (selectEff != 12)*$clWhite + (selectEff == 12)*$clGreen, 12);
    
    if (!(!bgmGettingPlayerStatus)) {
      if (timeDayOfWeek_old != $mplayer.getTimeDayOfWeek()) {
        timeDayOfWeek_old = $mplayer.getTimeDayOfWeek();
        if      ($mplayer.getTimeDayOfWeek() == 0) timeDayOfWeekText = " (日)";
        else if ($mplayer.getTimeDayOfWeek() == 1) timeDayOfWeekText = " (月)";
        else if ($mplayer.getTimeDayOfWeek() == 2) timeDayOfWeekText = " (火)";
        else if ($mplayer.getTimeDayOfWeek() == 3) timeDayOfWeekText = " (水)";
        else if ($mplayer.getTimeDayOfWeek() == 4) timeDayOfWeekText = " (木)";
        else if ($mplayer.getTimeDayOfWeek() == 5) timeDayOfWeekText = " (金)";
        else if ($mplayer.getTimeDayOfWeek() == 6) timeDayOfWeekText = " (土)";
      }
      
      if (!bgmOggOn) { // Midi
        drawText(240, 210+12*11, "Midi演奏状態                :" + $mplayer.getPlayerMidiStatus()   , $clWhite, 9);
        drawText(240, 210+12*12, "再生中のMidi番号            :" + $mplayer.getPlayerMidiPlayNo()   , $clWhite, 9);
        drawText(240, 210+12*13, "現在のテンポ                :" + $mplayer.getPlayerMidiTempo()    , $clWhite, 9);
        drawText(240, 210+12*14, "現在のティック              :" + $mplayer.getPlayerMidiTick()     , $clWhite, 9);
        drawText(240, 210+12*15, "現在のデータ内での演奏時間  :" + $mplayer.getPlayerMidiTime()     , $clWhite, 9);
        drawText(240, 210+12*16, "再生開始してからのループ回数:" + $mplayer.getPlayerMidiLoopCount(), $clWhite, 9);
        
        drawText(470, 210+12*11, "ベースカウント    :" + $mplayer.getMidiTimeBase()     , $clWhite, 9);
        drawText(470, 210+12*12, "総ティック        :" + $mplayer.getMidiTotalTick()    , $clWhite, 9);
        drawText(470, 210+12*13, "総演奏時間        :" + $mplayer.getMidiTotalTime()    , $clWhite, 9);
        drawText(470, 210+12*14, "最初の発音ティック:" + $mplayer.getMidiFirstNoteTick(), $clWhite, 9);
        drawText(470, 210+12*15, "最初の発音の時間  :" + $mplayer.getMidiFirstNoteTime(), $clWhite, 9);
        drawText(470, 210+12*16, "最後の発音ティック:" + $mplayer.getMidiLastNoteTick() , $clWhite, 9);
        drawText(470, 210+12*17, "最後の発音の時間  :" + $mplayer.getMidiLastNoteTime() , $clWhite, 9);
        drawText(470, 210+12*18, "CC#111のティック  :" + $mplayer.getMidiLoopTick()     , $clWhite, 9);
        drawText(470, 210+12*19, "CC#111の位置の時間:" + $mplayer.getMidiLoopTime()     , $clWhite, 9);
        
        if (midiArySize > 0 && 0 <= $mplayer.getPlayerMidiPlayNo() && $mplayer.getPlayerMidiPlayNo() < midiArySize) {
          drawText(10, 70+20*1-5, "再生曲("+ ($mplayer.getPlayerMidiPlayNo()+1) +"/"+ midiArySize +")："+midiAry.get($mplayer.getPlayerMidiPlayNo()).getName(), $clGreen2, 9);
        }
      } else { // Ogg
        drawText(240, 210+12*11, "Ogg演奏状態                 :" + $mplayer.getPlayerOggStatus()   , $clWhite, 9);
        drawText(240, 210+12*12, "現在のデータ内での演奏時間  :" + $mplayer.getPlayerOggTime()     , $clWhite, 9);
        drawText(240, 210+12*13, "再生開始してからのループ回数:" + $mplayer.getPlayerOggLoopCount(), $clWhite, 9);
        drawText(470, 210+12*11, "チャンネル数　    :" + $mplayer.getOggChannels()     , $clWhite, 9);
        drawText(470, 210+12*12, "サンプリングレート:" + $mplayer.getOggSamplingRate() , $clWhite, 9);
        drawText(470, 210+12*13, "総演奏時間        :" + $mplayer.getOggTotalTime()    , $clWhite, 9);
        drawText(470, 210+12*14, "総サンプル数      :" + $mplayer.getOggTotalSamples() , $clWhite, 9);
        drawText(470, 210+12*15, "Oggループ開始位置 :" + $mplayer.getOggFileLoopStart(), $clWhite, 9);
        drawText(470, 210+12*16, "Oggループ終了位置 :" + $mplayer.getOggFileLoopEnd()  , $clWhite, 9);
        
        drawText(10, 70+20*1-5, "再生曲     ："+$mplayer.getPlayerOggPlayName(), $clGreen2, 9);
      }
      drawText(240, 210+12*18, "現在 : " + $mplayer.getTimeYear() +"/"+ $mplayer.getTimeMonth()  +"/"+ $mplayer.getTimeDay() + timeDayOfWeekText +" "
                                         + $mplayer.getTimeHour() +":"+ ($mplayer.getTimeMinute()/10%10) + ($mplayer.getTimeMinute()%10) +":"
                                         + ($mplayer.getTimeSecond()/10%10) + ($mplayer.getTimeSecond()%10) +"."+ ($mplayer.getTimeMilliSecond()/100%10)
                                         + ($mplayer.getTimeMilliSecond()/10%10) + ($mplayer.getTimeMilliSecond()%10)
                                         , $clWhite, 9);
      drawText(240, 210+12*19, "解像度 : " + $mplayer.getDisplayWidth() + " * " + $mplayer.getDisplayHeight(), $clWhite, 9);
      
      if      ($mplayer.getOSPlatformId() == 1) osPlatformText = "9x";
      else if ($mplayer.getOSPlatformId() == 2) osPlatformText = "NT";
      else                                      osPlatformText = "Unknow";
      drawText(240, 210+12*20, "OS : Windows " + osPlatformText + " " + $mplayer.getOSMajorVersion() + "." + $mplayer.getOSMinorVersion(), $clWhite, 9);
      
      drawText(240, 210+12*21, "Joystickあるか？ : ID1=" + $mplayer.getJoystickOn(0) + " ID2=" + $mplayer.getJoystickOn(1), $clWhite, 9);
      
    }
  }
  
  // FPS計算
  getTime = getTime();
  if (getTime - startGetTime >= 1000) {
    startGetTime = getTime;
    fps          = drawCnt;
    drawCnt      = 0;
  }
  drawText(10, $screenHeight-20, "FPS:"+fps, $clWhite);
  
  if ($mplayer.getPlayerReady()) drawText(10, $screenHeight-40, "MusicPlayer 準備中…", $clYellow);
  
  update();
}

function onDraw() {
  if (!openOption && !openListPlayer) drawCnt++;
}